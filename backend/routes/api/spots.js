const express = require('express');
const router = express.Router(); 
const { Op } = require('sequelize'); 
const { restoreUser, requireAuth } = require('../../utils/auth.js'); 
const { Spot, SpotImage, Review, ReviewImage, User } = require('../../db/models')


router.get('/', async (req, res) => {
    // const allSpots = await Spot.findAll({
    //     include: [
    //         {
    //             model: Review,
    //             attributes: ['stars'],
    //         },
    //         {
    //             model: SpotImage,
    //             where: {
    //                 preview: true,
    //             },
    //             attributes: ['url'],
    //         },
    //     ]
    // }); 

    // allSpots.forEach((spot) => {
    //     reviewStars = spot.Reviews.map((review) => review.stars);
    //     if (reviewStars.length) {
    //         spot.avgRating = reviewStars.reduce((sum, star) => sum + star, 0) / reviewStars.length;
    //     } else {
    //         spot.avgRating = null;
    //     }

    //     spot.dataValues.avgRatings = spot.avgRating;
    //     spot.dataValues.previewImage = spot.SpotImages[0]?.url || 'no url'; 

    //     delete spot.Reviews;
    //     delete spot.SpotImages;
    // })
    // console.log(allSpots, `<===`);
    // //! Is there a need to loop and ammend avgRating and preview imge to end of each individual spot obj ? TBD
    // return res.status(200).json({ Spots: allSpots }); 

    
        const spots = await Spot.findAll({
            include: [{ model: SpotImage }, { model: Review }],
        });
    
        // Mutate Spots object to add Avg Rating, previewImage
        let Spots = [];
        spots.forEach((spot) => {
            Spots.push(spot.toJSON());
        });
    
        Spots.forEach((spot) => {
            // Grab all reviews
            if (spot.Reviews.length) {
                let count = 0;
                // Iterate through reviews to find star count
                spot.Reviews.forEach((review) => {
                    count += review.stars;
                });
                spot.avgRating = count / spot.Reviews.length;
            } else {
                spot.avgRating = 0;
            }
            if (spot.SpotImages.length) {
                spot.SpotImages.forEach((image) => {
                    if (image.preview === true) {
                        spot.previewImage = image.url;
                    }
                });
            } else {
                spot.previewImage = "no preview url";
            }
            delete spot.SpotImages;
            delete spot.Reviews;
        });
    
        res.json({ Spots });
    
}); 

router.get('/current', restoreUser, requireAuth, async (req, res) => {
    const currentUserId = req.user.id;

    const currentSpots = await Spot.findAll({
        where: {
            ownerId: currentUserId,
        },
    });

    return res.status(200).json({
        Spots: currentSpots,
        //! avgRating,
        //! previewImg
    });

}); 

router.get('/:spotId', async (req, res) => {
    const spotById = await Spot.findByPk(req.params.spotId); 

    if (!spotById) {
        return res.status(404).json({ message: "Spot couldn't be found" })
    }

    return res.status(200).json({
        spotById,
        //! numReviews:
        //! avgStarRating:
        //! Spotimage:
        //! Owner:
    });

});

router.post('/', restoreUser, requireAuth, async (req, res) => {
    try {
        const { address, city, state, country, lat, lng, name, description, price } = req.body; 

    const newSpot = await Spot.create({
        ownerId: req.user.id,
        address, 
        city, 
        state, 
        country, 
        lat, 
        lng, 
        name, 
        description, 
        price,
    }); 

    res.status(201).json(newSpot); 
    } catch (e) {
        res.status(400).json({
            message: "Bad Request", // (or "Validation error" if generated by Sequelize),
            errors: {
              address: "Street address is required",
              city: "City is required",
              state: "State is required",
              country: "Country is required",
              lat: "Latitude must be within -90 and 90",
              lng: "Longitude must be within -180 and 180",
              name: "Name must be less than 50 characters",
              description: "Description is required",
              price: "Price per day must be a positive number"
            }
          })
    } 
})   

router.post('/:spotId/images', restoreUser, requireAuth, async (req, res) => { 
    const { url, preview } = req.body;

    const spotById = await Spot.findByPk(req.params.spotId); 
    
    if (!spotById) {
        return res.status(404).json({ message: "Spot couldn't be found" })
    } 

    if (spotById.ownerId !== req.user.id) {
        return res.status(403).json({
            message: "Spot must belong to user"
        })
    }
    //! import SpotImage model
    const newImage = await SpotImage.create({
        url: req.body.url,
        preview: req.body.preview,
        spotId: spotById.id //! is this needed?
    }); 
    //! do we need to specify attributes(where)to exclude spotId ?
    res.status(201).json(newImage);
})

router.put('/:spotId', restoreUser, requireAuth, async (req, res) => {
    try {
        const { address, city, state, country, lat, lng, name, description, price } = req.body; 
        
        let spotById = await Spot.findByPk(req.params.spotId); 
        
        if (!spotById) {
            return res.status(404).json({ message: "Spot couldn't be found" })
        } 
    
        if (spotById.ownerId !== req.user.id) {
            return res.status(403).json({
                message: "Spot must belong to user"
            })
        }

        spotById = await Spot.update({
        // ownerId: req.user.id,
        address: req.body.address,
        city: req.body.city, 
        state: req.body.state, 
        country: req.body.country, 
        lat: req.body.lat, 
        lng: req.body.lng, 
        name: req.body.name, 
        description: req.body.description, 
        price: req.body.price, 
        //...req.body
    }); 

    res.status(200).json(spotById); 
    } catch (e) {
        res.status(400).json({
            message: "Bad Request", // (or "Validation error" if generated by Sequelize),
            errors: {
              address: "Street address is required",
              city: "City is required",
              state: "State is required",
              country: "Country is required",
              lat: "Latitude must be within -90 and 90",
              lng: "Longitude must be within -180 and 180",
              name: "Name must be less than 50 characters",
              description: "Description is required",
              price: "Price per day must be a positive number"
            }
          })
    } 
    
}) 

router.delete('/:spotId', restoreUser, requireAuth, async (req, res) => { 
    const spotById = await Spot.findByPk(req.params.spotId);

    if (!spotById) {
        return res.status(404).json({ message: "Spot couldn't be found" })
    }
    
    if (spotById.ownerId !== req.user.id) {
        return res.status(403).json({
            message: "Spot must belong to user"
        })
    } 

    await spotById.destroy();

    return res.status(200).json({ message: " Successfully deleted" });
})




module.exports = router;